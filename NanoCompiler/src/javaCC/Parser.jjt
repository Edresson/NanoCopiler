/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Parser)
package javaCC;

import java.util.List;

public class Parser {

	private static final Integer SUCESSO = 1;
	private static final Integer ERRO = 0;
	
	private static List<Tok> listaTokens; 
	
	public SimpleNode compilar() throws ParseException, Error {
		return Parser.program();
  	}

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <"//" (~["\n","\r"])* ("\n"|"\r")>
}

TOKEN : /* OPERATORS */
{
  < APARENT : "(" >
| < FPARENT : ")" >
| < ACOLCH : "[" >
| < FCOLCH : "]" >
| < ACHAVE : "{" >
| < FCHAVE : "}" >
| < VIRGULA : "," >
| < PTOVIRGULA : ";" >
| < SOMA : "+" >
| < SUB : "-" >
| < MUL : "*" >
| < DIV : "/" >
| < RESTO : "%" >
| < IGUAL : "==" >
| < DIFERENTE : "!=" >
| < MAIOR : ">" >
| < MAIORIGUAL : ">=" >
| < MENOR : "<" >
| < MENORIGUAL : "<=" >
| < OR : "||" >
| < AND : "&&" >
| < NOT : "!" >
| < ATRIBUICAO : "=" >
| < ATRIBUICAO_SOMA : "+=" >
| < ATRIBUICAO_SUB : "-=" >
| < ATRIBUICAO_MUL : "*=" >
| < ATRIBUICAO_DIV : "/=" >
| < MOD : "%=" >
| < TERN_ENTAO : "?" >
| < TERN_SENAO : ":" >

}

TOKEN : /* PALAVRAS RESERVADAS */
{
  < STRING : "string" >
| < INT : "int" >
| < BOOL : "bool" >
| < VOID : "void" >
| < TRUE : "true" >
| < FALSE : "false" >
| < BREAK : "break" >
| < FOR : "for" >
| < WHILE : "while" >
| < RETURN : "return" >
| < IF : "if" >
| < ELSE : "else" >
| < READ : "read" >
| < WRITE : "write" >
}

TOKEN : /* EXPRESSÕES REGULARES */
{
  < #DIGITO : ["0"-"9"] >
| < #LETRA  : ["a"-"z","A"-"Z"]  >
| < NUMERO 	: (< DIGITO >)+ >
| < IDENTIFICADOR : (< LETRA > | "_")( < LETRA > | "_" | < DIGITO > )* >

}

SimpleNode program() #PROGRAMA :
{}
{
  decSeqList() { return jjtThis; }
}

void decSeqList() #METODO :
{}
{
  type() < IDENTIFICADOR > decSeq() 
| decProcedimento()
}

void decSeq() #DECLARACOES :
{}
{
  decVar()
| decFuncao()
}

void decProcedimento() #PROCEDIMENTO :
{}
{
  < IDENTIFICADOR > decFuncao() { listaTokens.add(Tok.IDENTIFICADOR); }
}

void decFuncao() #FUNCAO :
{}
{
  < APARENT > listaParametros() < FPARENT > < ACHAVE > bloco() < FCHAVE >
}

void decVar() #DEC_VAR :
{}
{
  dec() < PTOVIRGULA >
}

void dec() #DECLARACAO :
{}
{
  atribuicao()
| < ACOLCH > < NUMERO > < FCOLCH > decLinha()
| < VIRGULA > < IDENTIFICADOR > dec()
| empty()
}

void decLinha() #DECLARACAO_LINHA :
{}
{
  atribuicao()
| empty()
}

void atribuicao() #ATRIBUICAO :
{}
{
  < ATRIBUICAO > literal() dec()
}

void listaParametros() #LISTA_PARAMETROS :
{}
{
  type() < IDENTIFICADOR > restoParametros()
| empty()
}

void restoParametros() #RESTO_PARAMETROS :
{}
{
 < VIRGULA > type() < IDENTIFICADOR > restoParametros()
| listaParametros()
}

void type() #TIPO :
{}
{
  < INT >
| < STRING >
| < BOOL >
}

void bloco() #BLOCO :
{}
{
  type() < IDENTIFICADOR > decVar() listaEstado()
| listaEstado()
}

void listaEstado() #LISTA_ESTADO :
{}
{
  < IDENTIFICADOR > subRotinaAtribuicao()
| chamadaIf()
| chamadaWhile()
| chamadaFor()
| chamadaBreak()
| chamadaReturn()
| chamadaRead()
| chamadaWrite()
| empty()
}

void subRotinaAtribuicao() #SUB_ROTINA_ATRIBUICAO:
{}
{
  chamadaSubRotina() < PTOVIRGULA >
| chamadaAtribuicao() < PTOVIRGULA >
}

void chamadaRead() #READ :
{}
{
  < READ > var() < PTOVIRGULA >
}

void var() #VAR :
{}
{
  < IDENTIFICADOR > varLinha()
}

void varLinha() #VAR_LINHA :
{}
{
  < ACOLCH > exp() < FCOLCH >
| empty()
}

void chamadaWrite() #WRITE :
{}
{
  < WRITE > listaArgumento() < PTOVIRGULA >
}

void chamadaReturn() #RETURN :
{}
{
  < RETURN > chamadaReturnLinha()
}

void chamadaReturnLinha() #RETURN_LINHA :
{}
{
  < PTOVIRGULA >
| exp() < PTOVIRGULA >
}

void chamadaBreak() #BREAK :
{}
{
  < BREAK > < PTOVIRGULA >
}

void chamadaFor() #FOR :
{}
{
  < FOR > < APARENT > < IDENTIFICADOR > chamadaAtribuicao() < PTOVIRGULA > exp() < PTOVIRGULA > < IDENTIFICADOR > chamadaAtribuicao() < FPARENT > < ACHAVE > bloco() < FCHAVE >
}

void chamadaWhile() #WHILE :
{}
{
  < WHILE > < APARENT > exp() < FPARENT > < ACHAVE > bloco() < FCHAVE >
}

void chamadaIf() #IF :
{}
{
  < IF > < APARENT > exp() < FPARENT > < ACHAVE > bloco() < FCHAVE > chamadaIfLinha()
}

void chamadaIfLinha() #IF_LINHA :
{}
{
  < ELSE > < ACHAVE > bloco() < ACHAVE >
| empty()
}

void chamadaSubRotina() #SUB_ROTINA :
{}
{
  < APARENT > listaArgumento() < FPARENT > 
}

void chamadaAtribuicao() #CHAMADA_ATRIBUICAO :
{}
{
  < ATRIBUICAO > exp()
| < ATRIBUICAO_SOMA > exp()
| < ATRIBUICAO_SUB > exp()
| < ATRIBUICAO_MUL > exp()
| < ATRIBUICAO_DIV > exp()
| < MOD > exp()
}

void exp() #EXP :
{}
{
  literal() expLinha()
| < NOT > exp() expLinha()
| < SUB > exp() expLinha()
| < APARENT > exp() < FPARENT > expLinha()
}

void listaArgumento() #LISTA_ARGUMENTO :
{}
{
  < IDENTIFICADOR > restoArgumentos()
| < NUMERO > restoArgumentos()
| empty()
}

void restoArgumentos() #RESTO_ARGUMENTOS :
{}
{
  < VIRGULA > restoArgumentosLinha()
| listaArgumento()
}

void restoArgumentosLinha() #RESTO_ARGUMENTOS_LINHA :
{}
{
  < IDENTIFICADOR > restoArgumentos()
| < NUMERO > restoArgumentos()
}

void literal() #LITERAL :
{}
{
  < NUMERO >
| < IDENTIFICADOR > chamaFuncao()
| < TRUE >
| < FALSE >
}

void chamaFuncao() #CHAMA_FUNCAO :
{}
{
  chamadaSubRotina()
| empty()
}

void expLinha() #EXP_LINHA :
{ }
{
  < SOMA > exp() expLinha() 
| < SUB > exp() expLinha()
| < MUL > exp() expLinha()
| < DIV > exp() expLinha()
| < RESTO > exp() expLinha()
| < IGUAL > exp() expLinha()
| < DIFERENTE > exp() expLinha()
| < MAIORIGUAL > exp() expLinha()
| < MENORIGUAL > exp() expLinha()
| < MAIOR > exp() expLinha()
| < MENOR > exp() expLinha()
| < OR > exp() expLinha()
| < AND > exp() expLinha()
| < TERN_ENTAO > exp() < TERN_SENAO > exp() expLinha()
| empty()
}

void empty() #VAZIO :
{}
{
  {}
}

Tok teste_lexico() :
{}
{
  < APARENT > { return Tok.APARENT; }
| < FPARENT > { return Tok.FPARENT; }
| < ACOLCH > { return Tok.ACOLCH; }
| < FCOLCH > { return Tok.FCOLCH; }
| < ACHAVE > { return Tok.ACHAVE; }
| < FCHAVE > { return Tok.FCHAVE; }
| < VIRGULA > { return Tok.VIRGULA; }
| < PTOVIRGULA > { return Tok.PTOVIRGULA; }
| < SOMA > { return Tok.SOMA; }
| < SUB > { return Tok.SUB; }
| < MUL > { return Tok.MUL; }
| < DIV > { return Tok.DIV; }
| < IGUAL > { return Tok.IGUAL; }
| < DIFERENTE > { return Tok.DIFERENTE; }
| < MAIOR > { return Tok.MAIOR; }
| < MAIORIGUAL > { return Tok.MAIORIGUAL; }
| < MENOR > { return Tok.MENOR; }
| < MENORIGUAL > { return Tok.MENORIGUAL; }
| < OR > { return Tok.OR; }
| < AND > { return Tok.AND; }
| < NOT > { return Tok.NOT; }
| < ATRIBUICAO > { return Tok.ATRIBUICAO; }
| < ATRIBUICAO_SOMA > { return Tok.ATRIBUICAO_SOMA; }
| < ATRIBUICAO_SUB > { return Tok.ATRIBUICAO_SUB; }
| < ATRIBUICAO_MUL > { return Tok.ATRIBUICAO_MUL; }
| < ATRIBUICAO_DIV > { return Tok.ATRIBUICAO_DIV; }
| < MOD > { return Tok.MOD; }
| < TERN_ENTAO > { return Tok.TERN_ENTAO; }
| < TERN_SENAO > { return Tok.TERN_SENAO; }
| < STRING > { return Tok.STRING; }
| < INT > { return Tok.INT; }
| < BOOL > { return Tok.BOOL; }
| < TRUE > { return Tok.TRUE; }
| < FALSE > { return Tok.FALSE; }
| < BREAK > { return Tok.BREAK; }
| < FOR > { return Tok.FOR; }
| < WHILE > { return Tok.WHILE; }
| < RETURN > { return Tok.RETURN; }
| < IF > { return Tok.IF; }
| < ELSE > { return Tok.ELSE; }
| < IDENTIFICADOR > { return Tok.IDENTIFICADOR; }
| < NUMERO > { return Tok.NUMERO; }
| < RESTO > { return Tok.RESTO; }
| < READ > { return Tok.READ; }
| < WRITE > { return Tok.WRITE; }
}