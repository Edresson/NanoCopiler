/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Parser)
package javaCC;

public class Parser {

  public static void main(String args []) throws ParseException {

    Parser parser = new Parser(System.in);
    while (true) {

      System.out.println("Leitura de tokens:");
      System.out.print("Digite um token qualquer: (para terminar digite ';')");

      try {

        switch (Parser.program()) {
          case MOD : 
	          System.out.println("Token lido: " + Tok.MOD.descricao());
	          break;
          case STRING : 
	          System.out.println("Token lido: " + Tok.STRING.descricao());
	          break;
		  case SOMA : 
	          System.out.println("Token lido: " + Tok.SOMA.descricao());
	          break;
	      case SUB : 
	          System.out.println("Token lido: " + Tok.SUB.descricao());
	          break;
	      case DIV : 
	          System.out.println("Token lido: " + Tok.DIV.descricao());
	          break;
	      case MUL : 
	          System.out.println("Token lido: " + Tok.MUL.descricao());
	          break;
	      case IGUAL : 
	          System.out.println("Token lido: " + Tok.IGUAL.descricao());
	          break;
	      case ATRIBUICAO :
              System.out.println("Token lido: " + Tok.ATRIBUICAO.descricao());
              break;
	      case IDENTIFICADOR :
              System.out.println("Token lido: " + Tok.IDENTIFICADOR.descricao());
              break;
          case APARENT :
              System.out.println("Token lido: " + Tok.APARENT.descricao());
              break;    
		  case FPARENT :
              System.out.println("Token lido: " + Tok.FPARENT.descricao());
              break;
		  case ACHAVE :
              System.out.println("Token lido: " + Tok.ACHAVE.descricao());
              break;
          case FCHAVE :
              System.out.println("Token lido: " + Tok.FCHAVE.descricao());
              break;
		  case ACOLCH :
              System.out.println("Token lido: " + Tok.ACOLCH.descricao());
              break;
		  case FCOLCH :
              System.out.println("Token lido: " + Tok.FCOLCH.descricao());
              break;
          case VIRGULA :
              System.out.println("Token lido: " + Tok.VIRGULA.descricao());
              break;
          case NUMERO :
              System.out.println("Token lido: " + Tok.NUMERO.descricao());
              break;
          default : 
          break;

        }
      } catch (Exception e) {

        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Parser.ReInit(System.in);
      }
      catch (Error e) {

        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < APARENT : "(" >
| < FPARENT : ")" >
| < ACOLCH : "[" >
| < FCOLCH : "]" >
| < ACHAVE : "{" >
| < FCHAVE : "}" >
| < VIRGULA : "," >
| < PTOVIRGULA : ";" >
| < SOMA : "+" >
| < SUB : "-" >
| < MUL : "*" >
| < DIV : "/" >
| < RESTO : "%" >
| < IGUAL : "==" >
| < DIFERENTE : "!=" >
| < MAIOR : ">" >
| < MAIORIGUAL : ">=" >
| < MENOR : "<" >
| < MENORIGUAL : "<=" >
| < OR : "||" >
| < AND : "&&" >
| < NOT : "!" >
| < ATRIBUICAO : "=" >
| < ATRIBUICAO_SOMA : "+=" >
| < ATRIBUICAO_SUB : "-=" >
| < ATRIBUICAO_MUL : "*=" >
| < ATRIBUICAO_DIV : "/=" >
| < MOD : "%=" >
| < TERN_ENTAO : "?" >
| < TERN_SENAO : ":" >

}

TOKEN : /* PALAVRAS RESERVADAS */
{
  < STRING : "string" >
| < INT : "int" >
| < BOOL : "bool" >
| < TRUE : "true" >
| < FALSE : "false" >
| < BREAK : "break" >
| < FOR : "for" >
| < WHILE : "while" >
| < RETURN : "return" >
| < IF : "if" >
| < ELSE : "else" >
| < READ : "read" >
| < WRITE : "write" >
}

TOKEN : /* EXPRESSÕES REGULARES */
{
  < #DIGITO : ["0"-"9"] >
| < #LETRA  : ["a"-"z","A"-"Z"]  >
| < NUMERO 	: (< DIGITO >)+ >
| < IDENTIFICADOR : (< LETRA > | "_")( < LETRA > | "_" | < DIGITO > )* >

}

int program() :
{}
{
  decSeq() { return 1; }
}

void decSeq() :
{}
{
  dec() decSeqLinha()
}

void decSeqLinha() :
{}
{
  LOOKAHEAD(3)
  decSeq()
| dec()
}

void dec() :
{}
{
  varDec()
| < IDENTIFICADOR > < APARENT > paramList() < FPARENT > < ACOLCH > block() < FCOLCH >
| type() < IDENTIFICADOR > < APARENT > paramList() < FPARENT > < ACOLCH > block() < FCOLCH > 
}

void varDec() :
{}
{
  type() varSpecSeq() < PTOVIRGULA >
}

void varSpec() :
{}
{
  < IDENTIFICADOR > varSpecLinha()
}

void varSpecLinha() :
{}
{
  < ATRIBUICAO > literal()
| < ACHAVE > < NUMERO > < FCHAVE > varSpecDuasLinhas()
}

void varSpecDuasLinhas() :
{}
{
  < ATRIBUICAO > < ACOLCH > literalSeq() < FCOLCH >
| empty()
}

void varSpecSeq() :
{}
{
  varSpec() varSpecSeqLinha()
}

void varSpecSeqLinha() :
{
}
{
  < VIRGULA > varSpecSeq()
| varSpec()
}

void type() :
{}
{
  < INT >
| < STRING >
| < BOOL >

}

void param() :
{}
{
  type() < IDENTIFICADOR > paramLinha()
}

void paramLinha() :
{}
{
  < IDENTIFICADOR > < ACHAVE > < FCHAVE >
| empty()
}


void block() :
{}
{
  varDecList() stmtList()
} 

void stmt() :
{}
{
  LOOKAHEAD(2)
  assign() < PTOVIRGULA >
| subCall() < PTOVIRGULA >
| ifStmt()
| whileStmt()
| forStmt()
| breakStmt()
| returnStmt()
| readStmt()
| writeStmt()
}

void ifStmt() :
{}
{
  < IF > < APARENT > exp() < FPARENT > < ACOLCH > block() < FCOLCH > ifStmtLinha()
}

void ifStmtLinha() :
{
}
{
  < ELSE > < ACOLCH > block() < FCOLCH >
| empty()
}

void whileStmt() :
{}
{
  < WHILE > < APARENT > exp() < FPARENT > < ACOLCH > block() < FCOLCH >
}

void forStmt() :
{}
{
  < FOR > < APARENT > assign() < PTOVIRGULA > exp() < PTOVIRGULA > assign() < FPARENT > < ACOLCH > block() < FCOLCH >
}

void breakStmt() :
{}
{
  < BREAK > < PTOVIRGULA >
}

void readStmt() :
{}
{
  < READ > var() < PTOVIRGULA >
}

void writeStmt() :
{}
{
  < WRITE > expList() < PTOVIRGULA >
}

void returnStmt() :
{}
{
  LOOKAHEAD(2)
  < RETURN > < PTOVIRGULA >
| < RETURN > exp() < PTOVIRGULA >
}

void subCall() :
{}
{
  < IDENTIFICADOR > < APARENT > expList() < FPARENT >
}

void assign() :
{}
{
  var() assignLinha()
}

void assignLinha() :
{ }
{
  < ATRIBUICAO > exp()
| < ATRIBUICAO_SOMA > exp()
| < ATRIBUICAO_SUB > exp()
| < ATRIBUICAO_MUL > exp()
| < ATRIBUICAO_DIV > exp()
| < MOD > exp()
}

void var() :
{}
{
  < IDENTIFICADOR > varLinha()
}

void varLinha() :
{}
{
  < IDENTIFICADOR > < ACHAVE > exp() < FCHAVE >
}

void exp() :
{}
{
  LOOKAHEAD(2)
  subCall() expLinha()
| var() expLinha()
| < NOT > exp() expLinha()
| < SUB > exp() expLinha()
| literal() expLinha()
| < APARENT > exp() < FPARENT > expLinha()
}

void expLinha() :
{ }
{
  < SOMA > exp() expLinha()
| < SUB > exp() expLinha()
| < MUL > exp() expLinha()
| < DIV > exp() expLinha()
| < RESTO > exp() expLinha()
| < IGUAL > exp() expLinha()
| < DIFERENTE > exp() expLinha()
| < MAIORIGUAL > exp() expLinha()
| < MENORIGUAL > exp() expLinha()
| < MAIOR > exp() expLinha()
| < MENOR > exp() expLinha()
| < OR > exp() expLinha()
| < AND > exp() expLinha()
| < TERN_ENTAO > exp() < TERN_SENAO > exp() expLinha()
| empty()
}

void empty() :
{}
{
  {}
}
  
  

void literal() :
{}
{
  < NUMERO >
}

void paramList() :
{}
{
  paramSeq()
| empty()
}

void paramSeq() :
{}
{
  param() paramSeqLinha()
}

void paramSeqLinha() :
{}
{
  < VIRGULA > paramSeq()
| param()
}

void varDecList() :
{}
{
  LOOKAHEAD(3)
  varDec() decSeq()
| dec()
}

void stmtList() :
{}
{
  stmt() stmtList()
| empty() 
}
 

void literalSeq() :
{}
{
  literal() literalSeqLinha()
}

void literalSeqLinha() :
{}
{
  LOOKAHEAD(2)
  literalSeq()
| literal()
}

void expList() :
{}
{
  expSeq()
| empty()
}

void expSeq() :
{}
{
  exp() expSeqLinha()
}

void expSeqLinha() :
{}
{
  < VIRGULA > expSeq()
| exp()
}

Tok teste_lexico() :
{}
{
  < APARENT > { return Tok.APARENT; }
| < FPARENT > { return Tok.FPARENT; }
| < ACOLCH > { return Tok.ACOLCH; }
| < FCOLCH > { return Tok.FCOLCH; }
| < ACHAVE > { return Tok.ACHAVE; }
| < FCHAVE > { return Tok.FCHAVE; }
| < VIRGULA > { return Tok.VIRGULA; }
| < PTOVIRGULA > { return Tok.PTOVIRGULA; }
| < SOMA > { return Tok.SOMA; }
| < SUB > { return Tok.SUB; }
| < MUL > { return Tok.MUL; }
| < DIV > { return Tok.DIV; }
| < IGUAL > { return Tok.IGUAL; }
| < DIFERENTE > { return Tok.DIFERENTE; }
| < MAIOR > { return Tok.MAIOR; }
| < MAIORIGUAL > { return Tok.MAIORIGUAL; }
| < MENOR > { return Tok.MENOR; }
| < MENORIGUAL > { return Tok.MENORIGUAL; }
| < OR > { return Tok.OR; }
| < AND > { return Tok.AND; }
| < NOT > { return Tok.NOT; }
| < ATRIBUICAO > { return Tok.ATRIBUICAO; }
| < ATRIBUICAO_SOMA > { return Tok.ATRIBUICAO_SOMA; }
| < ATRIBUICAO_SUB > { return Tok.ATRIBUICAO_SUB; }
| < ATRIBUICAO_MUL > { return Tok.ATRIBUICAO_MUL; }
| < ATRIBUICAO_DIV > { return Tok.ATRIBUICAO_DIV; }
| < MOD > { return Tok.MOD; }
| < TERN_ENTAO > { return Tok.TERN_ENTAO; }
| < TERN_SENAO > { return Tok.TERN_SENAO; }
| < STRING > { return Tok.STRING; }
| < INT > { return Tok.INT; }
| < BOOL > { return Tok.BOOL; }
| < TRUE > { return Tok.TRUE; }
| < FALSE > { return Tok.FALSE; }
| < BREAK > { return Tok.BREAK; }
| < FOR > { return Tok.FOR; }
| < WHILE > { return Tok.WHILE; }
| < RETURN > { return Tok.RETURN; }
| < IF > { return Tok.IF; }
| < ELSE > { return Tok.ELSE; }
| < IDENTIFICADOR > { return Tok.IDENTIFICADOR; }
| < NUMERO > { return Tok.NUMERO; }
| < RESTO > { return Tok.RESTO; }
| < READ > { return Tok.READ; }
| < WRITE > { return Tok.WRITE; }
}