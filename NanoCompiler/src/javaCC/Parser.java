/* Generated By:JavaCC: Do not edit this line. Parser.java */
package javaCC;

public class Parser implements ParserConstants {

  public static void main(String args []) throws ParseException {

    Parser parser = new Parser(System.in);
    while (true) {

      System.out.println("Leitura de tokens:");
      System.out.print("Digite um token qualquer: (para terminar digite ';')");

      try {

        switch (Parser.program()) {
          case MOD :
                  System.out.println("Token lido: " + Tok.MOD.descricao());
                  break;
          case STRING :
                  System.out.println("Token lido: " + Tok.STRING.descricao());
                  break;
                  case SOMA :
                  System.out.println("Token lido: " + Tok.SOMA.descricao());
                  break;
              case SUB :
                  System.out.println("Token lido: " + Tok.SUB.descricao());
                  break;
              case DIV :
                  System.out.println("Token lido: " + Tok.DIV.descricao());
                  break;
              case MUL :
                  System.out.println("Token lido: " + Tok.MUL.descricao());
                  break;
              case IGUAL :
                  System.out.println("Token lido: " + Tok.IGUAL.descricao());
                  break;
              case ATRIBUICAO :
              System.out.println("Token lido: " + Tok.ATRIBUICAO.descricao());
              break;
              case IDENTIFICADOR :
              System.out.println("Token lido: " + Tok.IDENTIFICADOR.descricao());
              break;
          case APARENT :
              System.out.println("Token lido: " + Tok.APARENT.descricao());
              break;
                  case FPARENT :
              System.out.println("Token lido: " + Tok.FPARENT.descricao());
              break;
                  case ACHAVE :
              System.out.println("Token lido: " + Tok.ACHAVE.descricao());
              break;
          case FCHAVE :
              System.out.println("Token lido: " + Tok.FCHAVE.descricao());
              break;
                  case ACOLCH :
              System.out.println("Token lido: " + Tok.ACOLCH.descricao());
              break;
                  case FCOLCH :
              System.out.println("Token lido: " + Tok.FCOLCH.descricao());
              break;
          case VIRGULA :
              System.out.println("Token lido: " + Tok.VIRGULA.descricao());
              break;
          case NUMERO :
              System.out.println("Token lido: " + Tok.NUMERO.descricao());
              break;
          default :
          break;

        }
      } catch (Exception e) {

        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Parser.ReInit(System.in);
      }
      catch (Error e) {

        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public int program() throws ParseException {
    decSeq();
             {if (true) return 1;}
    throw new Error("Missing return statement in function");
  }

  static final public void decSeq() throws ParseException {
    dec();
    decSeqLinha();
  }

  static final public void decSeqLinha() throws ParseException {
    if (jj_2_1(3)) {
      decSeq();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case INT:
      case BOOL:
      case IDENTIFICADOR:
        dec();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void dec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case INT:
    case BOOL:
      varDec();
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(APARENT);
      paramList();
      jj_consume_token(FPARENT);
      jj_consume_token(ACOLCH);
      block();
      jj_consume_token(FCOLCH);
      break;
      type();
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(APARENT);
      paramList();
      jj_consume_token(FPARENT);
      jj_consume_token(ACOLCH);
      block();
      jj_consume_token(FCOLCH);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void varDec() throws ParseException {
    type();
    varSpecSeq();
    jj_consume_token(PTOVIRGULA);
  }

  static final public void varSpec() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    varSpecLinha();
  }

  static final public void varSpecLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIBUICAO:
      jj_consume_token(ATRIBUICAO);
      literal();
      break;
    case ACHAVE:
      jj_consume_token(ACHAVE);
      jj_consume_token(NUMERO);
      jj_consume_token(FCHAVE);
      varSpecDuasLinhas();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void varSpecDuasLinhas() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIBUICAO:
      jj_consume_token(ATRIBUICAO);
      jj_consume_token(ACOLCH);
      literalSeq();
      jj_consume_token(FCOLCH);
      break;
    default:
      jj_la1[3] = jj_gen;
      empty();
    }
  }

  static final public void varSpecSeq() throws ParseException {
    varSpec();
    varSpecSeqLinha();
  }

  static final public void varSpecSeqLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      varSpecSeq();
      break;
    case IDENTIFICADOR:
      varSpec();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void param() throws ParseException {
    type();
    jj_consume_token(IDENTIFICADOR);
    paramLinha();
  }

  static final public void paramLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(ACHAVE);
      jj_consume_token(FCHAVE);
      break;
    default:
      jj_la1[6] = jj_gen;
      empty();
    }
  }

  static final public void block() throws ParseException {
    varDecList();
    stmtList();
  }

  static final public void stmt() throws ParseException {
    if (jj_2_2(2)) {
      assign();
      jj_consume_token(PTOVIRGULA);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        subCall();
        jj_consume_token(PTOVIRGULA);
        break;
      case IF:
        ifStmt();
        break;
      case WHILE:
        whileStmt();
        break;
      case FOR:
        forStmt();
        break;
      case BREAK:
        breakStmt();
        break;
      case RETURN:
        returnStmt();
        break;
      case READ:
        readStmt();
        break;
      case WRITE:
        writeStmt();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ifStmt() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(APARENT);
    exp();
    jj_consume_token(FPARENT);
    jj_consume_token(ACOLCH);
    block();
    jj_consume_token(FCOLCH);
    ifStmtLinha();
  }

  static final public void ifStmtLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(ACOLCH);
      block();
      jj_consume_token(FCOLCH);
      break;
    default:
      jj_la1[8] = jj_gen;
      empty();
    }
  }

  static final public void whileStmt() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(APARENT);
    exp();
    jj_consume_token(FPARENT);
    jj_consume_token(ACOLCH);
    block();
    jj_consume_token(FCOLCH);
  }

  static final public void forStmt() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(APARENT);
    assign();
    jj_consume_token(PTOVIRGULA);
    exp();
    jj_consume_token(PTOVIRGULA);
    assign();
    jj_consume_token(FPARENT);
    jj_consume_token(ACOLCH);
    block();
    jj_consume_token(FCOLCH);
  }

  static final public void breakStmt() throws ParseException {
    jj_consume_token(BREAK);
    jj_consume_token(PTOVIRGULA);
  }

  static final public void readStmt() throws ParseException {
    jj_consume_token(READ);
    var();
    jj_consume_token(PTOVIRGULA);
  }

  static final public void writeStmt() throws ParseException {
    jj_consume_token(WRITE);
    expList();
    jj_consume_token(PTOVIRGULA);
  }

  static final public void returnStmt() throws ParseException {
    if (jj_2_3(2)) {
      jj_consume_token(RETURN);
      jj_consume_token(PTOVIRGULA);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        jj_consume_token(RETURN);
        exp();
        jj_consume_token(PTOVIRGULA);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void subCall() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(APARENT);
    expList();
    jj_consume_token(FPARENT);
  }

  static final public void assign() throws ParseException {
    var();
    assignLinha();
  }

  static final public void assignLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIBUICAO:
      jj_consume_token(ATRIBUICAO);
      exp();
      break;
    case ATRIBUICAO_SOMA:
      jj_consume_token(ATRIBUICAO_SOMA);
      exp();
      break;
    case ATRIBUICAO_SUB:
      jj_consume_token(ATRIBUICAO_SUB);
      exp();
      break;
    case ATRIBUICAO_MUL:
      jj_consume_token(ATRIBUICAO_MUL);
      exp();
      break;
    case ATRIBUICAO_DIV:
      jj_consume_token(ATRIBUICAO_DIV);
      exp();
      break;
    case MOD:
      jj_consume_token(MOD);
      exp();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    varLinha();
  }

  static final public void varLinha() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ACHAVE);
    exp();
    jj_consume_token(FCHAVE);
  }

  static final public void exp() throws ParseException {
    if (jj_2_4(2)) {
      subCall();
      expLinha();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        var();
        expLinha();
        break;
      case NOT:
        jj_consume_token(NOT);
        exp();
        expLinha();
        break;
      case SUB:
        jj_consume_token(SUB);
        exp();
        expLinha();
        break;
      case NUMERO:
        literal();
        expLinha();
        break;
      case APARENT:
        jj_consume_token(APARENT);
        exp();
        jj_consume_token(FPARENT);
        expLinha();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      jj_consume_token(SOMA);
      exp();
      expLinha();
      break;
    case SUB:
      jj_consume_token(SUB);
      exp();
      expLinha();
      break;
    case MUL:
      jj_consume_token(MUL);
      exp();
      expLinha();
      break;
    case DIV:
      jj_consume_token(DIV);
      exp();
      expLinha();
      break;
    case RESTO:
      jj_consume_token(RESTO);
      exp();
      expLinha();
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
      exp();
      expLinha();
      break;
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      exp();
      expLinha();
      break;
    case MAIORIGUAL:
      jj_consume_token(MAIORIGUAL);
      exp();
      expLinha();
      break;
    case MENORIGUAL:
      jj_consume_token(MENORIGUAL);
      exp();
      expLinha();
      break;
    case MAIOR:
      jj_consume_token(MAIOR);
      exp();
      expLinha();
      break;
    case MENOR:
      jj_consume_token(MENOR);
      exp();
      expLinha();
      break;
    case OR:
      jj_consume_token(OR);
      exp();
      expLinha();
      break;
    case AND:
      jj_consume_token(AND);
      exp();
      expLinha();
      break;
    case TERN_ENTAO:
      jj_consume_token(TERN_ENTAO);
      exp();
      jj_consume_token(TERN_SENAO);
      exp();
      expLinha();
      break;
    default:
      jj_la1[12] = jj_gen;
      empty();
    }
  }

  static final public void empty() throws ParseException {

  }

  static final public void literal() throws ParseException {
    jj_consume_token(NUMERO);
  }

  static final public void paramList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case INT:
    case BOOL:
      paramSeq();
      break;
    default:
      jj_la1[13] = jj_gen;
      empty();
    }
  }

  static final public void paramSeq() throws ParseException {
    param();
    paramSeqLinha();
  }

  static final public void paramSeqLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      paramSeq();
      break;
    case STRING:
    case INT:
    case BOOL:
      param();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void varDecList() throws ParseException {
    if (jj_2_5(3)) {
      varDec();
      decSeq();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case INT:
      case BOOL:
      case IDENTIFICADOR:
        dec();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void stmtList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
    case FOR:
    case WHILE:
    case RETURN:
    case IF:
    case READ:
    case WRITE:
    case IDENTIFICADOR:
      stmt();
      stmtList();
      break;
    default:
      jj_la1[16] = jj_gen;
      empty();
    }
  }

  static final public void literalSeq() throws ParseException {
    literal();
    literalSeqLinha();
  }

  static final public void literalSeqLinha() throws ParseException {
    if (jj_2_6(2)) {
      literalSeq();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        literal();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APARENT:
    case SUB:
    case NOT:
    case NUMERO:
    case IDENTIFICADOR:
      expSeq();
      break;
    default:
      jj_la1[18] = jj_gen;
      empty();
    }
  }

  static final public void expSeq() throws ParseException {
    exp();
    expSeqLinha();
  }

  static final public void expSeqLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      expSeq();
      break;
    case APARENT:
    case SUB:
    case NOT:
    case NUMERO:
    case IDENTIFICADOR:
      exp();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Tok teste_lexico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APARENT:
      jj_consume_token(APARENT);
                {if (true) return Tok.APARENT;}
      break;
    case FPARENT:
      jj_consume_token(FPARENT);
                {if (true) return Tok.FPARENT;}
      break;
    case ACOLCH:
      jj_consume_token(ACOLCH);
               {if (true) return Tok.ACOLCH;}
      break;
    case FCOLCH:
      jj_consume_token(FCOLCH);
               {if (true) return Tok.FCOLCH;}
      break;
    case ACHAVE:
      jj_consume_token(ACHAVE);
               {if (true) return Tok.ACHAVE;}
      break;
    case FCHAVE:
      jj_consume_token(FCHAVE);
               {if (true) return Tok.FCHAVE;}
      break;
    case VIRGULA:
      jj_consume_token(VIRGULA);
                {if (true) return Tok.VIRGULA;}
      break;
    case PTOVIRGULA:
      jj_consume_token(PTOVIRGULA);
                   {if (true) return Tok.PTOVIRGULA;}
      break;
    case SOMA:
      jj_consume_token(SOMA);
             {if (true) return Tok.SOMA;}
      break;
    case SUB:
      jj_consume_token(SUB);
            {if (true) return Tok.SUB;}
      break;
    case MUL:
      jj_consume_token(MUL);
            {if (true) return Tok.MUL;}
      break;
    case DIV:
      jj_consume_token(DIV);
            {if (true) return Tok.DIV;}
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
              {if (true) return Tok.IGUAL;}
      break;
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
                  {if (true) return Tok.DIFERENTE;}
      break;
    case MAIOR:
      jj_consume_token(MAIOR);
              {if (true) return Tok.MAIOR;}
      break;
    case MAIORIGUAL:
      jj_consume_token(MAIORIGUAL);
                   {if (true) return Tok.MAIORIGUAL;}
      break;
    case MENOR:
      jj_consume_token(MENOR);
              {if (true) return Tok.MENOR;}
      break;
    case MENORIGUAL:
      jj_consume_token(MENORIGUAL);
                   {if (true) return Tok.MENORIGUAL;}
      break;
    case OR:
      jj_consume_token(OR);
           {if (true) return Tok.OR;}
      break;
    case AND:
      jj_consume_token(AND);
            {if (true) return Tok.AND;}
      break;
    case NOT:
      jj_consume_token(NOT);
            {if (true) return Tok.NOT;}
      break;
    case ATRIBUICAO:
      jj_consume_token(ATRIBUICAO);
                   {if (true) return Tok.ATRIBUICAO;}
      break;
    case ATRIBUICAO_SOMA:
      jj_consume_token(ATRIBUICAO_SOMA);
                        {if (true) return Tok.ATRIBUICAO_SOMA;}
      break;
    case ATRIBUICAO_SUB:
      jj_consume_token(ATRIBUICAO_SUB);
                       {if (true) return Tok.ATRIBUICAO_SUB;}
      break;
    case ATRIBUICAO_MUL:
      jj_consume_token(ATRIBUICAO_MUL);
                       {if (true) return Tok.ATRIBUICAO_MUL;}
      break;
    case ATRIBUICAO_DIV:
      jj_consume_token(ATRIBUICAO_DIV);
                       {if (true) return Tok.ATRIBUICAO_DIV;}
      break;
    case MOD:
      jj_consume_token(MOD);
            {if (true) return Tok.MOD;}
      break;
    case TERN_ENTAO:
      jj_consume_token(TERN_ENTAO);
                   {if (true) return Tok.TERN_ENTAO;}
      break;
    case TERN_SENAO:
      jj_consume_token(TERN_SENAO);
                   {if (true) return Tok.TERN_SENAO;}
      break;
    case STRING:
      jj_consume_token(STRING);
               {if (true) return Tok.STRING;}
      break;
    case INT:
      jj_consume_token(INT);
            {if (true) return Tok.INT;}
      break;
    case BOOL:
      jj_consume_token(BOOL);
             {if (true) return Tok.BOOL;}
      break;
    case TRUE:
      jj_consume_token(TRUE);
             {if (true) return Tok.TRUE;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
              {if (true) return Tok.FALSE;}
      break;
    case BREAK:
      jj_consume_token(BREAK);
              {if (true) return Tok.BREAK;}
      break;
    case FOR:
      jj_consume_token(FOR);
            {if (true) return Tok.FOR;}
      break;
    case WHILE:
      jj_consume_token(WHILE);
              {if (true) return Tok.WHILE;}
      break;
    case RETURN:
      jj_consume_token(RETURN);
               {if (true) return Tok.RETURN;}
      break;
    case IF:
      jj_consume_token(IF);
           {if (true) return Tok.IF;}
      break;
    case ELSE:
      jj_consume_token(ELSE);
             {if (true) return Tok.ELSE;}
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
                      {if (true) return Tok.IDENTIFICADOR;}
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
               {if (true) return Tok.NUMERO;}
      break;
    case RESTO:
      jj_consume_token(RESTO);
              {if (true) return Tok.RESTO;}
      break;
    case READ:
      jj_consume_token(READ);
             {if (true) return Tok.READ;}
      break;
    case WRITE:
      jj_consume_token(WRITE);
              {if (true) return Tok.WRITE;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(50)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(ACHAVE)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(ATRIBUICAO)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(APARENT)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(APARENT)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(APARENT)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(FPARENT)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(PTOVIRGULA)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x8000200,0x8000000,0x800,0x0,0x0,0x0,0x0,0x0,0xf8000000,0x4004020,0x3ffe000,0x0,0x800,0x0,0x0,0x0,0x4004020,0x4004820,0xffffffe0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80038,0x80038,0x0,0x0,0x80000,0x38,0x80000,0x8df00,0x2000,0x800,0x1,0xc0000,0x2,0x38,0x38,0x80038,0x8df00,0x40000,0xc0000,0xc0000,0xcffff,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
