/* Generated By:JavaCC: Do not edit this line. Parser.java */
package javaCC;

public class Parser implements ParserConstants {

  public static void main(String args []) throws ParseException {

    Parser parser = new Parser(System.in);
    while (true) {

      System.out.println("Leitura de tokens:");
      System.out.print("Digite um token qualquer: (para terminar digite ';')");

      try {

        switch (Parser.program()) {
          case MOD :
                  System.out.println("Token lido: " + Tok.MOD.descricao());
                  break;
          case STRING :
                  System.out.println("Token lido: " + Tok.STRING.descricao());
                  break;
                  case SOMA :
                  System.out.println("Token lido: " + Tok.SOMA.descricao());
                  break;
              case SUB :
                  System.out.println("Token lido: " + Tok.SUB.descricao());
                  break;
              case DIV :
                  System.out.println("Token lido: " + Tok.DIV.descricao());
                  break;
              case MUL :
                  System.out.println("Token lido: " + Tok.MUL.descricao());
                  break;
              case IGUAL :
                  System.out.println("Token lido: " + Tok.IGUAL.descricao());
                  break;
              case ATRIBUICAO :
              System.out.println("Token lido: " + Tok.ATRIBUICAO.descricao());
              break;
              case IDENTIFICADOR :
              System.out.println("Token lido: " + Tok.IDENTIFICADOR.descricao());
              break;
          case APARENT :
              System.out.println("Token lido: " + Tok.APARENT.descricao());
              break;
                  case FPARENT :
              System.out.println("Token lido: " + Tok.FPARENT.descricao());
              break;
                  case ACHAVE :
              System.out.println("Token lido: " + Tok.ACHAVE.descricao());
              break;
          case FCHAVE :
              System.out.println("Token lido: " + Tok.FCHAVE.descricao());
              break;
                  case ACOLCH :
              System.out.println("Token lido: " + Tok.ACOLCH.descricao());
              break;
                  case FCOLCH :
              System.out.println("Token lido: " + Tok.FCOLCH.descricao());
              break;
          case VIRGULA :
              System.out.println("Token lido: " + Tok.VIRGULA.descricao());
              break;
          case NUMERO :
              System.out.println("Token lido: " + Tok.NUMERO.descricao());
              break;
          default :
          break;

        }
      } catch (Exception e) {

        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Parser.ReInit(System.in);
      }
      catch (Error e) {

        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public int program() throws ParseException {
    decSeqList();
                 {if (true) return 1;}
    throw new Error("Missing return statement in function");
  }

  static final public void decSeqList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case INT:
    case BOOL:
      type();
      jj_consume_token(IDENTIFICADOR);
      decSeq();
      break;
    case IDENTIFICADOR:
      decProcedimento();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void decSeq() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACOLCH:
    case VIRGULA:
    case PTOVIRGULA:
    case ATRIBUICAO:
      decVar();
      break;
    case APARENT:
      decFuncao();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void decProcedimento() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    decFuncao();
  }

  static final public void decFuncao() throws ParseException {
    jj_consume_token(APARENT);
    listaParametros();
    jj_consume_token(FPARENT);
    jj_consume_token(ACHAVE);
    bloco();
    jj_consume_token(FCHAVE);
  }

  static final public void decVar() throws ParseException {
    dec();
    jj_consume_token(PTOVIRGULA);
  }

  static final public void dec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIBUICAO:
      atribuicao();
      break;
    case ACOLCH:
      jj_consume_token(ACOLCH);
      jj_consume_token(NUMERO);
      jj_consume_token(FCOLCH);
      decLinha();
      break;
    case VIRGULA:
      jj_consume_token(VIRGULA);
      jj_consume_token(IDENTIFICADOR);
      dec();
      break;
    default:
      jj_la1[2] = jj_gen;
      empty();
    }
  }

  static final public void decLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIBUICAO:
      atribuicao();
      break;
    default:
      jj_la1[3] = jj_gen;
      empty();
    }
  }

  static final public void atribuicao() throws ParseException {
    jj_consume_token(ATRIBUICAO);
    literal();
    dec();
  }

  static final public void listaParametros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case INT:
    case BOOL:
      type();
      jj_consume_token(IDENTIFICADOR);
      restoParametros();
      break;
    default:
      jj_la1[4] = jj_gen;
      empty();
    }
  }

  static final public void restoParametros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      type();
      jj_consume_token(IDENTIFICADOR);
      restoParametros();
      break;
    default:
      jj_la1[5] = jj_gen;
      listaParametros();
    }
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void bloco() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
    case INT:
    case BOOL:
      type();
      jj_consume_token(IDENTIFICADOR);
      decVar();
      listaEstado();
      break;
    default:
      jj_la1[7] = jj_gen;
      listaEstado();
    }
  }

  static final public void listaEstado() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      subRotinaAtribuicao();
      break;
    case IF:
      chamadaIf();
      break;
    case WHILE:
      chamadaWhile();
      break;
    case FOR:
      chamadaFor();
      break;
    case BREAK:
      chamadaBreak();
      break;
    case RETURN:
      chamadaReturn();
      break;
    case READ:
      chamadaRead();
      break;
    case WRITE:
      chamadaWrite();
      break;
    default:
      jj_la1[8] = jj_gen;
      empty();
    }
  }

  static final public void subRotinaAtribuicao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APARENT:
      chamadaSubRotina();
      jj_consume_token(PTOVIRGULA);
      break;
    case ATRIBUICAO:
    case ATRIBUICAO_SOMA:
    case ATRIBUICAO_SUB:
    case ATRIBUICAO_MUL:
    case ATRIBUICAO_DIV:
    case MOD:
      chamadaAtribuicao();
      jj_consume_token(PTOVIRGULA);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void chamadaRead() throws ParseException {
    jj_consume_token(READ);
    var();
    jj_consume_token(PTOVIRGULA);
  }

  static final public void var() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    varLinha();
  }

  static final public void varLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ACOLCH:
      jj_consume_token(ACOLCH);
      exp();
      jj_consume_token(FCOLCH);
      break;
    default:
      jj_la1[10] = jj_gen;
      empty();
    }
  }

  static final public void chamadaWrite() throws ParseException {
    jj_consume_token(WRITE);
    listaArgumento();
    jj_consume_token(PTOVIRGULA);
  }

  static final public void chamadaReturn() throws ParseException {
    jj_consume_token(RETURN);
    chamadaReturnLinha();
  }

  static final public void chamadaReturnLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PTOVIRGULA:
      jj_consume_token(PTOVIRGULA);
      break;
    case APARENT:
    case SUB:
    case NOT:
    case TRUE:
    case FALSE:
    case NUMERO:
    case IDENTIFICADOR:
      exp();
      jj_consume_token(PTOVIRGULA);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void chamadaBreak() throws ParseException {
    jj_consume_token(BREAK);
    jj_consume_token(PTOVIRGULA);
  }

  static final public void chamadaFor() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(APARENT);
    jj_consume_token(IDENTIFICADOR);
    chamadaAtribuicao();
    jj_consume_token(PTOVIRGULA);
    exp();
    jj_consume_token(PTOVIRGULA);
    jj_consume_token(IDENTIFICADOR);
    chamadaAtribuicao();
    jj_consume_token(FPARENT);
    jj_consume_token(ACHAVE);
    bloco();
    jj_consume_token(FCHAVE);
  }

  static final public void chamadaWhile() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(APARENT);
    exp();
    jj_consume_token(FPARENT);
    jj_consume_token(ACHAVE);
    bloco();
    jj_consume_token(FCHAVE);
  }

  static final public void chamadaIf() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(APARENT);
    exp();
    jj_consume_token(FPARENT);
    jj_consume_token(ACHAVE);
    bloco();
    jj_consume_token(FCHAVE);
    chamadaIfLinha();
  }

  static final public void chamadaIfLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(ACHAVE);
      bloco();
      jj_consume_token(ACHAVE);
      break;
    default:
      jj_la1[12] = jj_gen;
      empty();
    }
  }

  static final public void chamadaSubRotina() throws ParseException {
    jj_consume_token(APARENT);
    listaArgumento();
    jj_consume_token(FPARENT);
  }

  static final public void chamadaAtribuicao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIBUICAO:
      jj_consume_token(ATRIBUICAO);
      exp();
      break;
    case ATRIBUICAO_SOMA:
      jj_consume_token(ATRIBUICAO_SOMA);
      exp();
      break;
    case ATRIBUICAO_SUB:
      jj_consume_token(ATRIBUICAO_SUB);
      exp();
      break;
    case ATRIBUICAO_MUL:
      jj_consume_token(ATRIBUICAO_MUL);
      exp();
      break;
    case ATRIBUICAO_DIV:
      jj_consume_token(ATRIBUICAO_DIV);
      exp();
      break;
    case MOD:
      jj_consume_token(MOD);
      exp();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NUMERO:
    case IDENTIFICADOR:
      literal();
      expLinha();
      break;
    case NOT:
      jj_consume_token(NOT);
      exp();
      expLinha();
      break;
    case SUB:
      jj_consume_token(SUB);
      exp();
      expLinha();
      break;
    case APARENT:
      jj_consume_token(APARENT);
      exp();
      jj_consume_token(FPARENT);
      expLinha();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void listaArgumento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      restoArgumentos();
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      restoArgumentos();
      break;
    default:
      jj_la1[15] = jj_gen;
      empty();
    }
  }

  static final public void restoArgumentos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VIRGULA:
      jj_consume_token(VIRGULA);
      restoArgumentosLinha();
      break;
    default:
      jj_la1[16] = jj_gen;
      listaArgumento();
    }
  }

  static final public void restoArgumentosLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      restoArgumentos();
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      restoArgumentos();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      chamaFuncao();
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void chamaFuncao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APARENT:
      chamadaSubRotina();
      break;
    default:
      jj_la1[19] = jj_gen;
      empty();
    }
  }

  static final public void expLinha() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      jj_consume_token(SOMA);
      exp();
      expLinha();
      break;
    case SUB:
      jj_consume_token(SUB);
      exp();
      expLinha();
      break;
    case MUL:
      jj_consume_token(MUL);
      exp();
      expLinha();
      break;
    case DIV:
      jj_consume_token(DIV);
      exp();
      expLinha();
      break;
    case RESTO:
      jj_consume_token(RESTO);
      exp();
      expLinha();
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
      exp();
      expLinha();
      break;
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
      exp();
      expLinha();
      break;
    case MAIORIGUAL:
      jj_consume_token(MAIORIGUAL);
      exp();
      expLinha();
      break;
    case MENORIGUAL:
      jj_consume_token(MENORIGUAL);
      exp();
      expLinha();
      break;
    case MAIOR:
      jj_consume_token(MAIOR);
      exp();
      expLinha();
      break;
    case MENOR:
      jj_consume_token(MENOR);
      exp();
      expLinha();
      break;
    case OR:
      jj_consume_token(OR);
      exp();
      expLinha();
      break;
    case AND:
      jj_consume_token(AND);
      exp();
      expLinha();
      break;
    case TERN_ENTAO:
      jj_consume_token(TERN_ENTAO);
      exp();
      jj_consume_token(TERN_SENAO);
      exp();
      expLinha();
      break;
    default:
      jj_la1[20] = jj_gen;
      empty();
    }
  }

  static final public void empty() throws ParseException {

  }

  static final public Tok teste_lexico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APARENT:
      jj_consume_token(APARENT);
                {if (true) return Tok.APARENT;}
      break;
    case FPARENT:
      jj_consume_token(FPARENT);
                {if (true) return Tok.FPARENT;}
      break;
    case ACOLCH:
      jj_consume_token(ACOLCH);
               {if (true) return Tok.ACOLCH;}
      break;
    case FCOLCH:
      jj_consume_token(FCOLCH);
               {if (true) return Tok.FCOLCH;}
      break;
    case ACHAVE:
      jj_consume_token(ACHAVE);
               {if (true) return Tok.ACHAVE;}
      break;
    case FCHAVE:
      jj_consume_token(FCHAVE);
               {if (true) return Tok.FCHAVE;}
      break;
    case VIRGULA:
      jj_consume_token(VIRGULA);
                {if (true) return Tok.VIRGULA;}
      break;
    case PTOVIRGULA:
      jj_consume_token(PTOVIRGULA);
                   {if (true) return Tok.PTOVIRGULA;}
      break;
    case SOMA:
      jj_consume_token(SOMA);
             {if (true) return Tok.SOMA;}
      break;
    case SUB:
      jj_consume_token(SUB);
            {if (true) return Tok.SUB;}
      break;
    case MUL:
      jj_consume_token(MUL);
            {if (true) return Tok.MUL;}
      break;
    case DIV:
      jj_consume_token(DIV);
            {if (true) return Tok.DIV;}
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
              {if (true) return Tok.IGUAL;}
      break;
    case DIFERENTE:
      jj_consume_token(DIFERENTE);
                  {if (true) return Tok.DIFERENTE;}
      break;
    case MAIOR:
      jj_consume_token(MAIOR);
              {if (true) return Tok.MAIOR;}
      break;
    case MAIORIGUAL:
      jj_consume_token(MAIORIGUAL);
                   {if (true) return Tok.MAIORIGUAL;}
      break;
    case MENOR:
      jj_consume_token(MENOR);
              {if (true) return Tok.MENOR;}
      break;
    case MENORIGUAL:
      jj_consume_token(MENORIGUAL);
                   {if (true) return Tok.MENORIGUAL;}
      break;
    case OR:
      jj_consume_token(OR);
           {if (true) return Tok.OR;}
      break;
    case AND:
      jj_consume_token(AND);
            {if (true) return Tok.AND;}
      break;
    case NOT:
      jj_consume_token(NOT);
            {if (true) return Tok.NOT;}
      break;
    case ATRIBUICAO:
      jj_consume_token(ATRIBUICAO);
                   {if (true) return Tok.ATRIBUICAO;}
      break;
    case ATRIBUICAO_SOMA:
      jj_consume_token(ATRIBUICAO_SOMA);
                        {if (true) return Tok.ATRIBUICAO_SOMA;}
      break;
    case ATRIBUICAO_SUB:
      jj_consume_token(ATRIBUICAO_SUB);
                       {if (true) return Tok.ATRIBUICAO_SUB;}
      break;
    case ATRIBUICAO_MUL:
      jj_consume_token(ATRIBUICAO_MUL);
                       {if (true) return Tok.ATRIBUICAO_MUL;}
      break;
    case ATRIBUICAO_DIV:
      jj_consume_token(ATRIBUICAO_DIV);
                       {if (true) return Tok.ATRIBUICAO_DIV;}
      break;
    case MOD:
      jj_consume_token(MOD);
            {if (true) return Tok.MOD;}
      break;
    case TERN_ENTAO:
      jj_consume_token(TERN_ENTAO);
                   {if (true) return Tok.TERN_ENTAO;}
      break;
    case TERN_SENAO:
      jj_consume_token(TERN_SENAO);
                   {if (true) return Tok.TERN_SENAO;}
      break;
    case STRING:
      jj_consume_token(STRING);
               {if (true) return Tok.STRING;}
      break;
    case INT:
      jj_consume_token(INT);
            {if (true) return Tok.INT;}
      break;
    case BOOL:
      jj_consume_token(BOOL);
             {if (true) return Tok.BOOL;}
      break;
    case TRUE:
      jj_consume_token(TRUE);
             {if (true) return Tok.TRUE;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
              {if (true) return Tok.FALSE;}
      break;
    case BREAK:
      jj_consume_token(BREAK);
              {if (true) return Tok.BREAK;}
      break;
    case FOR:
      jj_consume_token(FOR);
            {if (true) return Tok.FOR;}
      break;
    case WHILE:
      jj_consume_token(WHILE);
              {if (true) return Tok.WHILE;}
      break;
    case RETURN:
      jj_consume_token(RETURN);
               {if (true) return Tok.RETURN;}
      break;
    case IF:
      jj_consume_token(IF);
           {if (true) return Tok.IF;}
      break;
    case ELSE:
      jj_consume_token(ELSE);
             {if (true) return Tok.ELSE;}
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
                      {if (true) return Tok.IDENTIFICADOR;}
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
               {if (true) return Tok.NUMERO;}
      break;
    case RESTO:
      jj_consume_token(RESTO);
              {if (true) return Tok.RESTO;}
      break;
    case READ:
      jj_consume_token(READ);
             {if (true) return Tok.READ;}
      break;
    case WRITE:
      jj_consume_token(WRITE);
              {if (true) return Tok.WRITE;}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x10003140,0x10001100,0x10000000,0x0,0x1000,0x0,0x0,0x0,0xf0000040,0x100,0x800a040,0x0,0xf0000000,0x8008040,0x0,0x1000,0x0,0x0,0x40,0x7ffc000,0xffffffc0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200070,0x0,0x0,0x0,0x70,0x0,0x70,0x70,0x237c00,0x3,0x0,0x300300,0x8000,0x3,0x300300,0x300000,0x0,0x300000,0x300300,0x0,0x4,0x33ff7f,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
