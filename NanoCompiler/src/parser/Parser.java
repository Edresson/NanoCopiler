/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package parser;

import java.util.List;
import front.Tok;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();
        private static final Integer SUCESSO = 1;
        private static final Integer ERRO = 0;

        private static List<Tok> listaTokens;

        public SimpleNode compilar() throws ParseException, Error {
                return Parser.program();
        }

  static final public SimpleNode program() throws ParseException {
 /*@bgen(jjtree) PROGRAMA */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      decSeqList();
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void decSeqList() throws ParseException {
 /*@bgen(jjtree) METODO */
  SimpleNode jjtn000 = new SimpleNode(JJTMETODO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        verificaMain();
        break;
      case STRING:
        jj_consume_token(STRING);
        jj_consume_token(IDENTIFICADOR);
        decSeq();
        break;
      case BOOL:
        jj_consume_token(BOOL);
        jj_consume_token(IDENTIFICADOR);
        decSeq();
        break;
      case IDENTIFICADOR:
        decProcedimento();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void verificaMain() throws ParseException {
 /*@bgen(jjtree) VERIFICAMAIN */
  SimpleNode jjtn000 = new SimpleNode(JJTVERIFICAMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        decSeq();
        break;
      case MAIN:
        decMain();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void decSeq() throws ParseException {
 /*@bgen(jjtree) DECLARACOES */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACOES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACOLCH:
      case VIRGULA:
      case PTOVIRGULA:
      case ATRIBUICAO:
        decVar();
        break;
      case APARENT:
        decFuncao();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void decProcedimento() throws ParseException {
 /*@bgen(jjtree) PROCEDIMENTO */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDIMENTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFICADOR);
      decFuncao();
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  listaTokens.add(Tok.IDENTIFICADOR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void decMain() throws ParseException {
 /*@bgen(jjtree) MAIN */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      jj_consume_token(APARENT);
      jj_consume_token(FPARENT);
      jj_consume_token(ACHAVE);
      bloco();
      jj_consume_token(FCHAVE);
      empty();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void decFuncao() throws ParseException {
 /*@bgen(jjtree) FUNCAO */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(APARENT);
      listaParametros();
      jj_consume_token(FPARENT);
      jj_consume_token(ACHAVE);
      bloco();
      jj_consume_token(FCHAVE);
      decSeqList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void decVar() throws ParseException {
 /*@bgen(jjtree) DEC_VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTDEC_VAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      dec();
      jj_consume_token(PTOVIRGULA);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void dec() throws ParseException {
 /*@bgen(jjtree) DECLARACAO */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUICAO:
        atribuicao();
        break;
      case ACOLCH:
        jj_consume_token(ACOLCH);
        jj_consume_token(NUMERO);
        jj_consume_token(FCOLCH);
        decLinha();
        break;
      case VIRGULA:
        jj_consume_token(VIRGULA);
        jj_consume_token(IDENTIFICADOR);
        dec();
        break;
      default:
        jj_la1[3] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void decLinha() throws ParseException {
 /*@bgen(jjtree) DECLARACAO_LINHA */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACAO_LINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUICAO:
        atribuicao();
        break;
      default:
        jj_la1[4] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void atribuicao() throws ParseException {
 /*@bgen(jjtree) ATRIBUICAO */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ATRIBUICAO);
      literal();
      dec();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void listaParametros() throws ParseException {
 /*@bgen(jjtree) LISTA_PARAMETROS */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_PARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case INT:
      case BOOL:
        type();
        jj_consume_token(IDENTIFICADOR);
        restoParametros();
        break;
      default:
        jj_la1[5] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void restoParametros() throws ParseException {
 /*@bgen(jjtree) RESTO_PARAMETROS */
  SimpleNode jjtn000 = new SimpleNode(JJTRESTO_PARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        jj_consume_token(VIRGULA);
        type();
        jj_consume_token(IDENTIFICADOR);
        restoParametros();
        break;
      default:
        jj_la1[6] = jj_gen;
        listaParametros();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void type() throws ParseException {
 /*@bgen(jjtree) TIPO */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case BOOL:
        jj_consume_token(BOOL);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void bloco() throws ParseException {
 /*@bgen(jjtree) BLOCO */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
      case INT:
      case BOOL:
        type();
        jj_consume_token(IDENTIFICADOR);
        decVar();
        listaEstado();
        break;
      default:
        jj_la1[8] = jj_gen;
        listaEstado();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void listaEstado() throws ParseException {
 /*@bgen(jjtree) LISTA_ESTADO */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_ESTADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        subRotinaAtribuicao();
        break;
      case IF:
        chamadaIf();
        break;
      case WHILE:
        chamadaWhile();
        break;
      case FOR:
        chamadaFor();
        break;
      case BREAK:
        chamadaBreak();
        break;
      case RETURN:
        chamadaReturn();
        break;
      case READ:
        chamadaRead();
        break;
      case WRITE:
        chamadaWrite();
        break;
      default:
        jj_la1[9] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void subRotinaAtribuicao() throws ParseException {
 /*@bgen(jjtree) SUB_ROTINA_ATRIBUICAO */
  SimpleNode jjtn000 = new SimpleNode(JJTSUB_ROTINA_ATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APARENT:
        chamadaSubRotina();
        jj_consume_token(PTOVIRGULA);
        break;
      case ATRIBUICAO:
      case ATRIBUICAO_SOMA:
      case ATRIBUICAO_SUB:
      case ATRIBUICAO_MUL:
      case ATRIBUICAO_DIV:
      case MOD:
        chamadaAtribuicao();
        jj_consume_token(PTOVIRGULA);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaRead() throws ParseException {
 /*@bgen(jjtree) READ */
  SimpleNode jjtn000 = new SimpleNode(JJTREAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(READ);
      var();
      jj_consume_token(PTOVIRGULA);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void var() throws ParseException {
 /*@bgen(jjtree) VAR */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFICADOR);
      varLinha();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void varLinha() throws ParseException {
 /*@bgen(jjtree) VAR_LINHA */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR_LINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACOLCH:
        jj_consume_token(ACOLCH);
        exp();
        jj_consume_token(FCOLCH);
        break;
      default:
        jj_la1[11] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaWrite() throws ParseException {
 /*@bgen(jjtree) WRITE */
  SimpleNode jjtn000 = new SimpleNode(JJTWRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WRITE);
      listaArgumento();
      jj_consume_token(PTOVIRGULA);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaReturn() throws ParseException {
 /*@bgen(jjtree) RETURN */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      chamadaReturnLinha();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaReturnLinha() throws ParseException {
 /*@bgen(jjtree) RETURN_LINHA */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN_LINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PTOVIRGULA:
        jj_consume_token(PTOVIRGULA);
        break;
      case APARENT:
      case SUB:
      case NOT:
      case TRUE:
      case FALSE:
      case NUMERO:
      case IDENTIFICADOR:
        exp();
        jj_consume_token(PTOVIRGULA);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaBreak() throws ParseException {
 /*@bgen(jjtree) BREAK */
  SimpleNode jjtn000 = new SimpleNode(JJTBREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
      jj_consume_token(PTOVIRGULA);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaFor() throws ParseException {
 /*@bgen(jjtree) FOR */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(APARENT);
      jj_consume_token(IDENTIFICADOR);
      chamadaAtribuicao();
      jj_consume_token(PTOVIRGULA);
      exp();
      jj_consume_token(PTOVIRGULA);
      jj_consume_token(IDENTIFICADOR);
      chamadaAtribuicao();
      jj_consume_token(FPARENT);
      jj_consume_token(ACHAVE);
      bloco();
      jj_consume_token(FCHAVE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaWhile() throws ParseException {
 /*@bgen(jjtree) WHILE */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(APARENT);
      exp();
      jj_consume_token(FPARENT);
      jj_consume_token(ACHAVE);
      bloco();
      jj_consume_token(FCHAVE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaIf() throws ParseException {
 /*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(APARENT);
      exp();
      jj_consume_token(FPARENT);
      jj_consume_token(ACHAVE);
      bloco();
      jj_consume_token(FCHAVE);
      chamadaIfLinha();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaIfLinha() throws ParseException {
 /*@bgen(jjtree) IF_LINHA */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_LINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        jj_consume_token(ACHAVE);
        bloco();
        jj_consume_token(ACHAVE);
        break;
      default:
        jj_la1[13] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaSubRotina() throws ParseException {
 /*@bgen(jjtree) SUB_ROTINA */
  SimpleNode jjtn000 = new SimpleNode(JJTSUB_ROTINA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(APARENT);
      listaArgumento();
      jj_consume_token(FPARENT);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamadaAtribuicao() throws ParseException {
 /*@bgen(jjtree) CHAMADA_ATRIBUICAO */
  SimpleNode jjtn000 = new SimpleNode(JJTCHAMADA_ATRIBUICAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATRIBUICAO:
        jj_consume_token(ATRIBUICAO);
        exp();
        break;
      case ATRIBUICAO_SOMA:
        jj_consume_token(ATRIBUICAO_SOMA);
        exp();
        break;
      case ATRIBUICAO_SUB:
        jj_consume_token(ATRIBUICAO_SUB);
        exp();
        break;
      case ATRIBUICAO_MUL:
        jj_consume_token(ATRIBUICAO_MUL);
        exp();
        break;
      case ATRIBUICAO_DIV:
        jj_consume_token(ATRIBUICAO_DIV);
        exp();
        break;
      case MOD:
        jj_consume_token(MOD);
        exp();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void exp() throws ParseException {
 /*@bgen(jjtree) EXP */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NUMERO:
      case IDENTIFICADOR:
        literal();
        expLinha();
        break;
      case NOT:
        jj_consume_token(NOT);
        exp();
        expLinha();
        break;
      case SUB:
        jj_consume_token(SUB);
        exp();
        expLinha();
        break;
      case APARENT:
        jj_consume_token(APARENT);
        exp();
        jj_consume_token(FPARENT);
        expLinha();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void listaArgumento() throws ParseException {
 /*@bgen(jjtree) LISTA_ARGUMENTO */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_ARGUMENTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        restoArgumentos();
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        restoArgumentos();
        break;
      default:
        jj_la1[16] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void restoArgumentos() throws ParseException {
 /*@bgen(jjtree) RESTO_ARGUMENTOS */
  SimpleNode jjtn000 = new SimpleNode(JJTRESTO_ARGUMENTOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        jj_consume_token(VIRGULA);
        restoArgumentosLinha();
        break;
      default:
        jj_la1[17] = jj_gen;
        listaArgumento();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void restoArgumentosLinha() throws ParseException {
 /*@bgen(jjtree) RESTO_ARGUMENTOS_LINHA */
  SimpleNode jjtn000 = new SimpleNode(JJTRESTO_ARGUMENTOS_LINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        restoArgumentos();
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        restoArgumentos();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void literal() throws ParseException {
 /*@bgen(jjtree) LITERAL */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        chamaFuncao();
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void chamaFuncao() throws ParseException {
 /*@bgen(jjtree) CHAMA_FUNCAO */
  SimpleNode jjtn000 = new SimpleNode(JJTCHAMA_FUNCAO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APARENT:
        chamadaSubRotina();
        break;
      default:
        jj_la1[20] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void expLinha() throws ParseException {
 /*@bgen(jjtree) EXP_LINHA */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP_LINHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
        jj_consume_token(SOMA);
        exp();
        expLinha();
        break;
      case SUB:
        jj_consume_token(SUB);
        exp();
        expLinha();
        break;
      case MUL:
        jj_consume_token(MUL);
        exp();
        expLinha();
        break;
      case DIV:
        jj_consume_token(DIV);
        exp();
        expLinha();
        break;
      case RESTO:
        jj_consume_token(RESTO);
        exp();
        expLinha();
        break;
      case IGUAL:
        jj_consume_token(IGUAL);
        exp();
        expLinha();
        break;
      case DIFERENTE:
        jj_consume_token(DIFERENTE);
        exp();
        expLinha();
        break;
      case MAIORIGUAL:
        jj_consume_token(MAIORIGUAL);
        exp();
        expLinha();
        break;
      case MENORIGUAL:
        jj_consume_token(MENORIGUAL);
        exp();
        expLinha();
        break;
      case MAIOR:
        jj_consume_token(MAIOR);
        exp();
        expLinha();
        break;
      case MENOR:
        jj_consume_token(MENOR);
        exp();
        expLinha();
        break;
      case OR:
        jj_consume_token(OR);
        exp();
        expLinha();
        break;
      case AND:
        jj_consume_token(AND);
        exp();
        expLinha();
        break;
      case TERN_ENTAO:
        jj_consume_token(TERN_ENTAO);
        exp();
        jj_consume_token(TERN_SENAO);
        exp();
        expLinha();
        break;
      default:
        jj_la1[21] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void empty() throws ParseException {
 /*@bgen(jjtree) VAZIO */
  SimpleNode jjtn000 = new SimpleNode(JJTVAZIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Tok teste_lexico() throws ParseException {
 /*@bgen(jjtree) teste_lexico */
  SimpleNode jjtn000 = new SimpleNode(JJTTESTE_LEXICO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APARENT:
        jj_consume_token(APARENT);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {if (true) return Tok.APARENT;}
        break;
      case FPARENT:
        jj_consume_token(FPARENT);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {if (true) return Tok.FPARENT;}
        break;
      case ACOLCH:
        jj_consume_token(ACOLCH);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               {if (true) return Tok.ACOLCH;}
        break;
      case FCOLCH:
        jj_consume_token(FCOLCH);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               {if (true) return Tok.FCOLCH;}
        break;
      case ACHAVE:
        jj_consume_token(ACHAVE);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               {if (true) return Tok.ACHAVE;}
        break;
      case FCHAVE:
        jj_consume_token(FCHAVE);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               {if (true) return Tok.FCHAVE;}
        break;
      case VIRGULA:
        jj_consume_token(VIRGULA);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {if (true) return Tok.VIRGULA;}
        break;
      case PTOVIRGULA:
        jj_consume_token(PTOVIRGULA);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return Tok.PTOVIRGULA;}
        break;
      case SOMA:
        jj_consume_token(SOMA);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             {if (true) return Tok.SOMA;}
        break;
      case SUB:
        jj_consume_token(SUB);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return Tok.SUB;}
        break;
      case MUL:
        jj_consume_token(MUL);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return Tok.MUL;}
        break;
      case DIV:
        jj_consume_token(DIV);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return Tok.DIV;}
        break;
      case IGUAL:
        jj_consume_token(IGUAL);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              {if (true) return Tok.IGUAL;}
        break;
      case DIFERENTE:
        jj_consume_token(DIFERENTE);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  {if (true) return Tok.DIFERENTE;}
        break;
      case MAIOR:
        jj_consume_token(MAIOR);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              {if (true) return Tok.MAIOR;}
        break;
      case MAIORIGUAL:
        jj_consume_token(MAIORIGUAL);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return Tok.MAIORIGUAL;}
        break;
      case MENOR:
        jj_consume_token(MENOR);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              {if (true) return Tok.MENOR;}
        break;
      case MENORIGUAL:
        jj_consume_token(MENORIGUAL);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return Tok.MENORIGUAL;}
        break;
      case OR:
        jj_consume_token(OR);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           {if (true) return Tok.OR;}
        break;
      case AND:
        jj_consume_token(AND);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return Tok.AND;}
        break;
      case NOT:
        jj_consume_token(NOT);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return Tok.NOT;}
        break;
      case ATRIBUICAO:
        jj_consume_token(ATRIBUICAO);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return Tok.ATRIBUICAO;}
        break;
      case ATRIBUICAO_SOMA:
        jj_consume_token(ATRIBUICAO_SOMA);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        {if (true) return Tok.ATRIBUICAO_SOMA;}
        break;
      case ATRIBUICAO_SUB:
        jj_consume_token(ATRIBUICAO_SUB);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       {if (true) return Tok.ATRIBUICAO_SUB;}
        break;
      case ATRIBUICAO_MUL:
        jj_consume_token(ATRIBUICAO_MUL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       {if (true) return Tok.ATRIBUICAO_MUL;}
        break;
      case ATRIBUICAO_DIV:
        jj_consume_token(ATRIBUICAO_DIV);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       {if (true) return Tok.ATRIBUICAO_DIV;}
        break;
      case MOD:
        jj_consume_token(MOD);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return Tok.MOD;}
        break;
      case TERN_ENTAO:
        jj_consume_token(TERN_ENTAO);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return Tok.TERN_ENTAO;}
        break;
      case TERN_SENAO:
        jj_consume_token(TERN_SENAO);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   {if (true) return Tok.TERN_SENAO;}
        break;
      case STRING:
        jj_consume_token(STRING);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               {if (true) return Tok.STRING;}
        break;
      case INT:
        jj_consume_token(INT);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return Tok.INT;}
        break;
      case BOOL:
        jj_consume_token(BOOL);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             {if (true) return Tok.BOOL;}
        break;
      case TRUE:
        jj_consume_token(TRUE);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             {if (true) return Tok.TRUE;}
        break;
      case FALSE:
        jj_consume_token(FALSE);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              {if (true) return Tok.FALSE;}
        break;
      case BREAK:
        jj_consume_token(BREAK);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              {if (true) return Tok.BREAK;}
        break;
      case FOR:
        jj_consume_token(FOR);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {if (true) return Tok.FOR;}
        break;
      case WHILE:
        jj_consume_token(WHILE);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              {if (true) return Tok.WHILE;}
        break;
      case RETURN:
        jj_consume_token(RETURN);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               {if (true) return Tok.RETURN;}
        break;
      case IF:
        jj_consume_token(IF);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           {if (true) return Tok.IF;}
        break;
      case ELSE:
        jj_consume_token(ELSE);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             {if (true) return Tok.ELSE;}
        break;
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      {if (true) return Tok.IDENTIFICADOR;}
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               {if (true) return Tok.NUMERO;}
        break;
      case RESTO:
        jj_consume_token(RESTO);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              {if (true) return Tok.RESTO;}
        break;
      case READ:
        jj_consume_token(READ);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             {if (true) return Tok.READ;}
        break;
      case WRITE:
        jj_consume_token(WRITE);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              {if (true) return Tok.WRITE;}
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x10003140,0x10001100,0x10000000,0x0,0x1000,0x0,0x0,0x0,0xf0000040,0x100,0x800a040,0x0,0xf0000000,0x8008040,0x0,0x1000,0x0,0x0,0x40,0x7ffc000,0xffffffc0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400070,0x440000,0x0,0x0,0x0,0x70,0x0,0x70,0x70,0x437c00,0x3,0x0,0x600300,0x8000,0x3,0x600300,0x600000,0x0,0x600000,0x600300,0x0,0x4,0x63ff7f,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
