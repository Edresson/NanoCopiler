/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Parser)
package parser;

import java.util.List;
import front.Tok;

public class Parser {

	private static final Integer SUCESSO = 1;
	private static final Integer ERRO = 0; 
	
	public SimpleNode compilar() throws ParseException, Error {
		return Parser.program();
  	}

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <"//" (~["\n","\r"])* ("\n"|"\r")>
}

TOKEN : /* OPERATORS */
{
  < APARENT : "(" >
| < FPARENT : ")" >
| < ACOLCH : "[" >
| < FCOLCH : "]" >
| < ACHAVE : "{" >
| < FCHAVE : "}" >
| < VIRGULA : "," >
| < PTOVIRGULA : ";" >
| < SOMA : "+" >
| < SUB : "-" >
| < MUL : "*" >
| < DIV : "/" >
| < RESTO : "%" >
| < IGUAL : "==" >
| < DIFERENTE : "!=" >
| < MAIOR : ">" >
| < MAIORIGUAL : ">=" >
| < MENOR : "<" >
| < MENORIGUAL : "<=" >
| < OR : "||" >
| < AND : "&&" >
| < NOT : "!" >
| < ATRIBUICAO : "=" >
| < ATRIBUICAO_SOMA : "+=" >
| < ATRIBUICAO_SUB : "-=" >
| < ATRIBUICAO_MUL : "*=" >
| < ATRIBUICAO_DIV : "/=" >
| < MOD : "%=" >
| < TERN_ENTAO : "?" >
| < TERN_SENAO : ":" >

}

TOKEN : /* PALAVRAS RESERVADAS */
{
  < STRING : "string" >
| < INT : "int" >
| < BOOL : "bool" >
| < VOID : "void" >
| < TRUE : "true" >
| < FALSE : "false" >
| < BREAK : "break" >
| < FOR : "for" >
| < WHILE : "while" >
| < RETURN : "return" >
| < IF : "if" >
| < ELSE : "else" >
| < READ : "read" >
| < WRITE : "write" >
}

TOKEN : /* EXPRESSÕES REGULARES */
{
  < #DIGITO : ["0"-"9"] >
| < #LETRA  : ["a"-"z","A"-"Z"]  >
| < NUMERO 	: (< DIGITO >)+ >
| < IDENTIFICADOR : (< LETRA > | "_")( < LETRA > | "_" | < DIGITO > )* >

}

SimpleNode program() :
{}
{
  decSeqList() { return jjtThis; }
}

void decSeqList() :
{}
{
  type() IDENTIFICADOR() decSeq() 
| decProcedimento()
}

void decSeq() :
{}
{
  decVar()
| decFuncao()
}

void decProcedimento() :
{}
{
  IDENTIFICADOR() decFuncao() 
}

void decFuncao() :
{}
{
  APARENT() listaParametros() FPARENT() ACHAVE() bloco() FCHAVE()
}

void decVar() :
{}
{
  dec() PTOVIRGULA()
}

void dec() :
{}
{
  atribuicao()
| ACOLCH() NUMERO() FCOLCH() decLinha()
| VIRGULA() IDENTIFICADOR() dec()
| empty()
}

void decLinha() :
{}
{
  atribuicao()
| empty()
}

void atribuicao() :
{}
{
  ATRIBUICAO() literal() dec()
}

void listaParametros() :
{}
{
  type() IDENTIFICADOR() restoParametros()
| empty()
}

void restoParametros() :
{}
{
 VIRGULA() type() IDENTIFICADOR() restoParametros()
| listaParametros()
}

void type() :
{}
{
  INT()
| STRING()
| BOOL()
}

void bloco() :
{}
{
  type() IDENTIFICADOR() decVar() listaEstado()
| listaEstado()
}

void listaEstado() :
{}
{
  IDENTIFICADOR() subRotinaAtribuicao()
| chamadaIf()
| chamadaWhile()
| chamadaFor()
| chamadaBreak()
| chamadaReturn()
| chamadaRead()
| chamadaWrite()
| empty()
}

void subRotinaAtribuicao() :
{}
{
  chamadaSubRotina() PTOVIRGULA()
| chamadaAtribuicao() PTOVIRGULA()
}

void chamadaRead() :
{}
{
  READ() var() PTOVIRGULA()
}

void var() :
{}
{
  IDENTIFICADOR() varLinha()
}

void varLinha() :
{}
{
  ACOLCH() exp() FCOLCH()
| empty()
}

void chamadaWrite() :
{}
{
  WRITE() listaArgumento() PTOVIRGULA()
}

void chamadaReturn() :
{}
{
  RETURN() chamadaReturnLinha()
}

void chamadaReturnLinha() :
{}
{
  PTOVIRGULA()
| exp() PTOVIRGULA()
}

void chamadaBreak() :
{}
{
  BREAK() PTOVIRGULA()
}

void chamadaFor() :
{}
{
  FOR() APARENT() IDENTIFICADOR() chamadaAtribuicao() PTOVIRGULA() exp() PTOVIRGULA() IDENTIFICADOR() chamadaAtribuicao() FPARENT() ACHAVE() bloco() FCHAVE()
}

void chamadaWhile() :
{}
{
  WHILE() APARENT() exp() FPARENT() ACHAVE() bloco() FCHAVE()
}

void chamadaIf() :
{}
{
  IF() APARENT() exp() FPARENT() ACHAVE() bloco() FCHAVE() chamadaIfLinha()
}

void chamadaIfLinha() :
{}
{
  ELSE() ACHAVE() bloco() FCHAVE()
| empty()
}

void chamadaSubRotina() :
{}
{
  APARENT() listaArgumento() FPARENT() 
}

void chamadaAtribuicao() :
{}
{
  ATRIBUICAO() exp()
| ATRIBUICAO_SOMA() exp()
| ATRIBUICAO_SUB() exp()
| ATRIBUICAO_MUL() exp()
| ATRIBUICAO_DIV() exp()
| MOD() exp()
}

void exp() :
{}
{
  literal() expLinha()
| NOT() exp() expLinha()
| SUB() exp() expLinha()
| APARENT() exp() FPARENT() expLinha()
}

void listaArgumento() :
{}
{
  IDENTIFICADOR() restoArgumentos()
| NUMERO() restoArgumentos()
| empty()
}

void restoArgumentos() :
{}
{
  VIRGULA() restoArgumentosLinha()
| listaArgumento()
}

void restoArgumentosLinha() :
{}
{
  IDENTIFICADOR() restoArgumentos()
| NUMERO() restoArgumentos()
}

void literal() :
{}
{
  NUMERO()
| IDENTIFICADOR() chamaFuncao()
| TRUE()
| FALSE()
}

void chamaFuncao() :
{}
{
  chamadaSubRotina()
| empty()
}

void expLinha() :
{ }
{
  SOMA() exp() expLinha() 
| SUB() exp() expLinha()
| MUL() exp() expLinha()
| DIV() exp() expLinha()
| RESTO() exp() expLinha()
| IGUAL() exp() expLinha()
| DIFERENTE() exp() expLinha()
| MAIORIGUAL() exp() expLinha()
| MENORIGUAL() exp() expLinha()
| MAIOR() exp() expLinha()
| MENOR() exp() expLinha()
| OR() exp() expLinha()
| AND() exp() expLinha()
| TERN_ENTAO() exp() TERN_SENAO() exp() expLinha()
| empty()
}

void empty() :
{}
{
  {}
}

void APARENT() 			: {} { < APARENT > }
void FPARENT() 			: {} { < FPARENT > }
void ACOLCH() 			: {} { < ACOLCH > } 
void FCOLCH() 			: {} { < FCOLCH > } 
void ACHAVE() 			: {} { < ACHAVE > } 
void FCHAVE() 			: {} { < FCHAVE > } 
void VIRGULA() 			: {} { < VIRGULA > } 
void PTOVIRGULA() 		: {} { < PTOVIRGULA > } 
void SOMA() 			: {} { < SOMA > } 
void SUB() 				: {} { < SUB > } 
void MUL() 				: {} { < MUL > } 
void DIV() 				: {} { < DIV > } 
void IGUAL() 			: {} { < IGUAL > } 
void DIFERENTE() 		: {} { < DIFERENTE > } 
void MAIOR() 			: {} { < MAIOR > } 
void MAIORIGUAL() 		: {} { < MAIORIGUAL > } 
void MENOR() 			: {} { < MENOR > } 
void MENORIGUAL() 		: {} { < MENORIGUAL > }
void OR() 				: {} { < OR > } 
void AND() 				: {} { < AND > } 
void NOT() 				: {} { < NOT > } 
void ATRIBUICAO() 		: {} { < ATRIBUICAO > } 
void ATRIBUICAO_SOMA() 	: {} { < ATRIBUICAO_SOMA > } 
void ATRIBUICAO_SUB() 	: {} { < ATRIBUICAO_SUB > } 
void ATRIBUICAO_MUL() 	: {} { < ATRIBUICAO_MUL > } 
void ATRIBUICAO_DIV() 	: {} { < ATRIBUICAO_DIV > } 
void MOD() 				: {} { < MOD > } 
void TERN_ENTAO() 		: {} { < TERN_ENTAO > } 
void TERN_SENAO() 		: {} { < TERN_SENAO > } 
void INT() 				: {} { < INT > }
void BOOL() 			: {} { < BOOL > } 
void TRUE() 			: {} { < TRUE > } 
void FALSE() 			: {} { < FALSE > }
void BREAK() 			: {} { < BREAK > }
void FOR() 				: {} { < FOR > }
void WHILE() 			: {} { < WHILE > } 
void RETURN() 			: {} { < RETURN > } 
void IF() 				: {} { < IF > } 
void ELSE() 			: {} { < ELSE > } 
void RESTO() 			: {} { < RESTO > } 
void READ() 			: {} { < READ > } 
void WRITE() 			: {} { < WRITE > } 
void STRING() 			: { Token str; } { str = < STRING > { jjtThis.value = str.image; } }
void NUMERO() 			: { Token num; } { num = < NUMERO > { jjtThis.value = num.image; } }
void IDENTIFICADOR() 	: { Token id;  } { id = < IDENTIFICADOR > { jjtThis.value = id.image; } } 

Tok teste_lexico() :
{}
{
  APARENT() { return Tok.APARENT; }
| FPARENT() { return Tok.FPARENT; }
| ACOLCH() { return Tok.ACOLCH; }
| FCOLCH() { return Tok.FCOLCH; }
| ACHAVE() { return Tok.ACHAVE; }
| FCHAVE() { return Tok.FCHAVE; }
| VIRGULA() { return Tok.VIRGULA; }
| PTOVIRGULA() { return Tok.PTOVIRGULA; }
| SOMA() { return Tok.SOMA; }
| SUB() { return Tok.SUB; }
| MUL() { return Tok.MUL; }
| DIV() { return Tok.DIV; }
| IGUAL() { return Tok.IGUAL; }
| DIFERENTE() { return Tok.DIFERENTE; }
| MAIOR() { return Tok.MAIOR; }
| MAIORIGUAL() { return Tok.MAIORIGUAL; }
| MENOR() { return Tok.MENOR; }
| MENORIGUAL() { return Tok.MENORIGUAL; }
| OR() { return Tok.OR; }
| AND() { return Tok.AND; }
| NOT() { return Tok.NOT; }
| ATRIBUICAO() { return Tok.ATRIBUICAO; }
| ATRIBUICAO_SOMA() { return Tok.ATRIBUICAO_SOMA; }
| ATRIBUICAO_SUB() { return Tok.ATRIBUICAO_SUB; }
| ATRIBUICAO_MUL() { return Tok.ATRIBUICAO_MUL; }
| ATRIBUICAO_DIV() { return Tok.ATRIBUICAO_DIV; }
| MOD() { return Tok.MOD; }
| TERN_ENTAO() { return Tok.TERN_ENTAO; }
| TERN_SENAO() { return Tok.TERN_SENAO; }
| INT() { return Tok.INT; }
| BOOL() { return Tok.BOOL; }
| TRUE() { return Tok.TRUE; }
| FALSE() { return Tok.FALSE; }
| BREAK() { return Tok.BREAK; }
| FOR() { return Tok.FOR; }
| WHILE() { return Tok.WHILE; }
| RETURN() { return Tok.RETURN; }
| IF() { return Tok.IF; }
| ELSE() { return Tok.ELSE; }
| RESTO() { return Tok.RESTO; }
| READ() { return Tok.READ; }
| WRITE() { return Tok.WRITE; }
| NUMERO() { return Tok.NUMERO; }
| STRING() { return Tok.STRING; }
| IDENTIFICADOR() { return Tok.IDENTIFICADOR; }
}