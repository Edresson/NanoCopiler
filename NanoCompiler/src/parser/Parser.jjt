/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Parser)
package parser;

import java.util.List;

public class Parser {

	private static final Integer SUCESSO = 1;
	private static final Integer ERRO = 0; 
	
	public SimpleNode compilar() throws ParseException, Error {
		return Parser.program();
  	}

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <"//" (~["\n","\r"])* ("\n"|"\r")>
}

TOKEN : /* OPERADORES */
{
  < APARENT : "(" >
| < FPARENT : ")" >
| < ACOLCH : "[" >
| < FCOLCH : "]" >
| < ACHAVE : "{" >
| < FCHAVE : "}" >
| < VIRGULA : "," >
| < PTOVIRGULA : ";" >
| < SOMA : "+" >
| < SUB : "-" >
| < MUL : "*" >
| < DIV : "/" >
| < RESTO : "%" >
| < IGUAL : "==" >
| < DIFERENTE : "!=" >
| < MAIOR : ">" >
| < MAIORIGUAL : ">=" >
| < MENOR : "<" >
| < MENORIGUAL : "<=" >
| < OR : "||" >
| < AND : "&&" >
| < NOT : "!" >
| < ATRIBUICAO : "=" >
| < ATRIBUICAO_SOMA : "+=" >
| < ATRIBUICAO_SUB : "-=" >
| < ATRIBUICAO_MUL : "*=" >
| < ATRIBUICAO_DIV : "/=" >
| < MOD : "%=" >
| < TERN_ENTAO : "?" >
| < TERN_SENAO : ":" >

}

TOKEN : /* PALAVRAS RESERVADAS */
{
  < STRING : "string" >
| < INT : "int" >
| < BOOL : "bool" >
| < VOID : "void" >
| < TRUE : "true" >
| < FALSE : "false" >
| < BREAK : "break" >
| < FOR : "for" >
| < WHILE : "while" >
| < RETURN : "return" >
| < IF : "if" >
| < ELSE : "else" >
| < READ : "read" >
| < WRITE : "write" >
}

TOKEN : /* EXPRESSï¿½ES REGULAR */
{
  < #DIGITO : ["0"-"9"] >
| < #LETRA  : ["a"-"z","A"-"Z"]  >
| < NUMERO 	: (< DIGITO >)+ >
| < IDENTIFICADOR : (< LETRA > | "_")( < LETRA > | "_" | < DIGITO > )* >
| < STRING_LITERAL: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" > 
}

SimpleNode program() :
{}
{
  decSeqList() { return jjtThis; }
}

void decSeqList() :
{ Token id; }
{
  type() id = < IDENTIFICADOR > { jjtThis.value = id.image; } decSeq() 
| decProcedimento()
}

void decSeq() :
{}
{
  decVar()
| decFuncao()
}

void decProcedimento() :
{ Token id; }
{
  id = < IDENTIFICADOR > { jjtThis.value = id.image; } decFuncao() 
}

void decFuncao() :
{}
{
  < APARENT > listaParametros() < FPARENT > < ACHAVE > bloco() < FCHAVE >
}

void decVar() :
{}
{
  dec() < PTOVIRGULA >
}

void dec() :
{ Token num; Token id; }
{
  atribuicao()
| < ACOLCH > num = < NUMERO > { jjtThis.value = num.image; } < FCOLCH > decLinha()
| < VIRGULA > id = < IDENTIFICADOR > { jjtThis.value = id.image; } dec()
| empty()
}

void decLinha() :
{}
{
  atribuicao()
| empty()
}

void atribuicao() :
{}
{
  < ATRIBUICAO > literal() dec()
}

void listaParametros() :
{ Token id; }
{
  type() id = < IDENTIFICADOR > { jjtThis.value = id.image; } restoParametros()
| empty()
}

void restoParametros() :
{ Token id; }
{
 < VIRGULA > type() id = < IDENTIFICADOR > { jjtThis.value = id.image; } restoParametros()
| listaParametros()
}

void type() :
{}
{
  < INT >
| < STRING >
| < BOOL >
}

void bloco() :
{ Token id; }
{
  type() id = < IDENTIFICADOR > { jjtThis.value = id.image; } decVar() listaEstado()
| listaEstado()
}

void listaEstado() :
{ Token id; }
{
  id = < IDENTIFICADOR > { jjtThis.value = id.image; } subRotinaAtribuicao()
| chamadaIf()
| chamadaWhile()
| chamadaFor()
| chamadaBreak()
| chamadaReturn()
| chamadaRead()
| chamadaWrite()
| empty()
}

void subRotinaAtribuicao() :
{}
{
  chamadaSubRotina() < PTOVIRGULA >
| chamadaAtribuicao() < PTOVIRGULA >
}

void chamadaRead() :
{}
{
  < READ > var() < PTOVIRGULA >
}

void var() :
{ Token id; }
{
  id = < IDENTIFICADOR > { jjtThis.value = id.image; } varLinha()
}

void varLinha() :
{}
{
  < ACOLCH > exp() < FCOLCH >
| empty()
}

void chamadaWrite() :
{}
{
  < WRITE > listaArgumento() < PTOVIRGULA >
}

void chamadaReturn() :
{}
{
  < RETURN > chamadaReturnLinha()
}

void chamadaReturnLinha() :
{}
{
  < PTOVIRGULA >
| exp() < PTOVIRGULA >
}

void chamadaBreak() :
{}
{
  < BREAK > < PTOVIRGULA >
}

void chamadaFor() :
{ Token id; }
{
  < FOR > < APARENT > id = < IDENTIFICADOR > { jjtThis.value = id.image; } chamadaAtribuicao() < PTOVIRGULA > exp() < PTOVIRGULA > id = < IDENTIFICADOR > { jjtThis.value = id.image; } chamadaAtribuicao() < FPARENT > < ACHAVE > bloco() < FCHAVE >
}

void chamadaWhile() :
{}
{
  < WHILE > < APARENT > exp() < FPARENT > < ACHAVE > bloco() < FCHAVE >
}

void chamadaIf() :
{}
{
  < IF > < APARENT > exp() < FPARENT > < ACHAVE > bloco() < FCHAVE > chamadaIfLinha()
}

void chamadaIfLinha() :
{}
{
  < ELSE > < ACHAVE > bloco() < FCHAVE >
| empty()
}

void chamadaSubRotina() :
{}
{
  < APARENT > listaArgumento() < FPARENT > 
}

void chamadaAtribuicao() :
{}
{
  < ATRIBUICAO > exp()
| < ATRIBUICAO_SOMA > exp()
| < ATRIBUICAO_SUB > exp()
| < ATRIBUICAO_MUL > exp()
| < ATRIBUICAO_DIV > exp()
| < MOD > exp()
}

void exp() :
{}
{
  literal() expLinha()
| < NOT > exp() expLinha()
| < SUB > exp() expLinha()
| < APARENT > exp() < FPARENT > expLinha()
}

void listaArgumento() :
{ Token num; Token id; }
{
  id = < IDENTIFICADOR > { jjtThis.value = id.image; } restoArgumentos()
| num = < NUMERO > { jjtThis.value = num.image; } restoArgumentos()
| empty()
}

void restoArgumentos() :
{}
{
  < VIRGULA > restoArgumentosLinha()
| listaArgumento()
}

void restoArgumentosLinha() :
{ Token num; Token id; }
{
  id = < IDENTIFICADOR > { jjtThis.value = id.image; } restoArgumentos()
| num = < NUMERO > { jjtThis.value = num.image; } restoArgumentos()
}

void literal() :
{ Token num; Token id; Token str; }
{
  num = < NUMERO > { jjtThis.value = num.image; }
| id = < IDENTIFICADOR > { jjtThis.value = id.image; } chamaFuncao()
| str = < STRING_LITERAL > { jjtThis.value = str.image; }
| < TRUE >
| < FALSE >
}

void chamaFuncao() :
{}
{
  chamadaSubRotina()
| empty()
}

void expLinha() :
{ }
{
  < SOMA > exp() expLinha() 
| < SUB > exp() expLinha()
| < MUL > exp() expLinha()
| < DIV > exp() expLinha()
| < RESTO > exp() expLinha()
| < IGUAL > exp() expLinha()
| < DIFERENTE > exp() expLinha()
| < MAIORIGUAL > exp() expLinha()
| < MENORIGUAL > exp() expLinha()
| < MAIOR > exp() expLinha()
| < MENOR > exp() expLinha()
| < OR > exp() expLinha()
| < AND > exp() expLinha()
| < TERN_ENTAO > exp() < TERN_SENAO > exp() expLinha()
| empty()
}

void empty() :
{}
{
  {}
}